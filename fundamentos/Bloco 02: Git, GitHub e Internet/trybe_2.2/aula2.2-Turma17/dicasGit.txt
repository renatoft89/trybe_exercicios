Dicas Git:

N√£o esquecer ‚ö†Ô∏è

UM REPOSIT√ìRIO REMOTO NO GITHUB √â ONDE S√ÉO GUARDADOS OS SEUS ARQUIVOS NA NUVEM.
J√Å O REPOSIT√ìRIO LOCAL √â ONDE SE GUARDA OS SEUS ARQUIVOS NA SUA M√ÅQUINA.

Resumo dos comandos: üôÇ

git clone - Serve para "fazer o download" de um reposit√≥rio remoto para a sua m√°quina. Imaginando que um reposit√≥rio √© uma caixa com coisas dentro, ele faz uma c√≥pia exata da caixa que est√° remota e te d√° acesso local nessa c√≥pia.

git branch - Se usa este comando para ver as branchs de um reposit√≥rio que existem na sua m√°quina. Uma branch √© uma c√≥pia da caixa principal. Ela serve para voc√™ fazer altera√ß√µes sem impactar o conte√∫do original. Este comando mostra todas as caixas que existem acess√≠veis na sua m√°quina local. Assim voc√™ fica com a caixa principal e com as caixas com altera√ß√µes, cada uma sendo uma branch.

git branch nome-da-nova-branch - Serve para criar uma nova branch. Utilizando esse comando voc√™ cria uma nova caixa, que √© uma c√≥pia da caixa em que voc√™ est√° neste momento. Fica estranho criar tantas caixas assim, c√≥pias e c√≥pias, mas a id√©ia aqui √© justamente ter uma caixa pra cada altera√ß√£o que voc√™ for fazer (pense em uma caixa para cada demanda que for adere√ßar). √â importante nomear as caixas corretamente para que, assim, s√≥ de olhar para o nome da caixa voc√™ j√° saiba o que tem dentro.

git checkout nome-da-branch - √â usado para acessar (apontar para) uma branch espec√≠fica. Essa branch pode ser tanto uma nova quanto alguma outra branch j√° existente no reposit√≥rio local ou remoto. Este comando serve para voc√™ trocar a caixa com a qual est√° trabalhando, j√° que voc√™ pode ter v√°rias caixas diferentes. Voc√™ pode trocar sempre que quiser, seja pra conferir alguma coisa, seja para manter v√°rias altera√ß√µes em paralelo.

git pull - Serve para puxar para a sua m√°quina mudan√ßas feitas ao c√≥digo salvas no reposit√≥rio remoto, que no nosso caso est√° no GitHub. Esse comando serve para que voc√™ possa atualizar o conte√∫do de suas caixas, sincronizando-as com a vers√£o mais recente da caixa que est√° no reposit√≥rio remoto. Em um projeto pode existir mais de um colaborador, ent√£o imagine que um outra pessoa conseguiu terminar de resolver um bug, ou criar uma melhoria: ele vai jogar essa melhoria na caixa principal. Voc√™ pode utilizar o git pull e puxar essas altera√ß√µes para as suas caixas.

git add . / git add path/to/file - Utiliza-se esse comando para colocar as mudan√ßas no index, que √© como se fosse um aeroporto: As mudan√ßas ainda n√£o sa√≠ram para a nuvem, mas j√° est√£o prontas para isso. O git add pega as mudan√ßas que voc√™ fez e coloca num espa√ßo chamado staging area, que √© um espa√ßo onde as altera√ß√µes esperam pra ser empacotadas e enviadas.

git commit -m "mensagem" - Serve para juntar as mudan√ßas do √≠ndice num pacote de mudan√ßas (chamado de commit) e inseri-las no reposit√≥rio local. Normalmente esse comando √© utilizado depois do git add, porque ele pega as altera√ß√µes que foram colocadas na staging area, empacota e coloca como altera√ß√£o consolidada do reposit√≥rio local.

git push - Serve para passar as mudan√ßas para o reposit√≥rio remoto. Voc√™ "faz o upload" das mudan√ßas da sua m√°quina para o reposit√≥rio remoto.

Merge Pull Request - Serve para agregar as mudan√ßas feitas pela sua branch a uma outra branch. Quando se quer oficializar uma altera√ß√£o no c√≥digo, faz-se o merge da branch deste c√≥digo com a branch maste